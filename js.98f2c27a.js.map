{"version":3,"sources":["js/refs.js","js/timerClass.js","js/index.js"],"names":["daysRest","document","querySelector","hoursRest","minsRest","secsRest","refs","CountdownTimer","constructor","targetDate","getTime","intervalId","time","start","setInterval","currentDate","Date","now","insertData","getDaysCount","getHoursCount","getMinsCount","getSecsCount","finish","clearInterval","deltaTime","padValue","Math","floor","value","num","symbol","String","padStart","place","textContent","timer"],"mappings":";AAAe,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAAA,IAAA,EAAA,CACXA,SAAUC,SAASC,cAAc,uBACjCC,UAAWF,SAASC,cAAc,wBAClCE,SAAUH,SAASC,cAAc,uBACjCG,SAAUJ,SAASC,cAAc,wBAJtB,QAAA,QAAA;;ACGqB,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAHpC,IAAA,EAAA,EAAA,QAAA,cAGoC,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAFpC,MAAM,SAAEF,EAAF,UAAYG,EAAZ,SAAuBC,EAAvB,SAAiCC,GAAaC,EAApD,QAEe,MAAMC,EACnBC,YAAYC,GACLA,KAAAA,WAAaA,EAAWC,UACxBC,KAAAA,WAAa,KACbC,KAAAA,KAAO,EAEdC,QACOF,KAAAA,WAAaG,YAAY,KACxBC,IAAAA,EAAcC,KAAKC,MAClBL,KAAAA,KAAO,KAAKH,WAAaM,EAEzBG,KAAAA,WAAWlB,EAAU,KAAKmB,aAAa,KAAKP,OAC5CM,KAAAA,WAAWf,EAAW,KAAKiB,cAAc,KAAKR,OAC9CM,KAAAA,WAAWd,EAAU,KAAKiB,aAAa,KAAKT,OAC5CM,KAAAA,WAAWb,EAAU,KAAKiB,aAAa,KAAKV,QAChD,KAEHW,SACEC,cAAc,KAAKb,YAEvBQ,aAAaM,GACJ,OAAA,KAAKC,SAASC,KAAKC,MAAMH,EAAa,OAAuB,EAAG,KAEzEL,cAAcK,GACL,OAAA,KAAKC,SACVC,KAAKC,MAAOH,EAAa,MAAyB,MAClD,EACA,KAGJC,SAASG,EAAOC,EAAKC,GACZC,OAAAA,OAAOH,GAAOI,SAASH,EAAKC,GAErCV,aAAaI,GACJ,OAAA,KAAKC,SAASC,KAAKC,MAAOH,EAAa,KAAoB,KAAa,EAAG,KAEpFH,aAAaG,GACJ,OAAA,KAAKC,SAASC,KAAKC,MAAOH,EAAa,IAAc,KAAO,EAAG,KAGxEP,WAAWgB,EAAOL,GACRK,OAAAA,EAAMC,YAAcN,GAzCI,QAAA,QAAA;;ACyDpC,aA5DA,IAAA,EAAA,EAAA,QAAA,oBA4DA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GA1DA,MAAMO,EAAQ,IAAI7B,EAAJ,QAAmB,IAAIS,KAAK,gBAC1CoB,EAAMvB","file":"js.98f2c27a.js","sourceRoot":"../src","sourcesContent":["export default {\n    daysRest: document.querySelector('[data-value=\"days\"]'),\n    hoursRest: document.querySelector('[data-value=\"hours\"]'),\n    minsRest: document.querySelector('[data-value=\"mins\"]'),\n    secsRest: document.querySelector('[data-value=\"secs\"]'),  \n}","import refs from './refs.js';\nconst { daysRest, hoursRest, minsRest, secsRest } = refs;\n\nexport default class CountdownTimer {\n  constructor(targetDate) {\n    this.targetDate = targetDate.getTime();\n    this.intervalId = null;\n    this.time = 0;\n  }\n  start() {\n    this.intervalId = setInterval(() => {\n      let currentDate = Date.now();\n      this.time = this.targetDate - currentDate;\n        \n      this.insertData(daysRest, this.getDaysCount(this.time));\n      this.insertData(hoursRest, this.getHoursCount(this.time));\n      this.insertData(minsRest, this.getMinsCount(this.time));\n      this.insertData(secsRest, this.getSecsCount(this.time));\n    }, 1000);\n  }\n    finish() {\n      clearInterval(this.intervalId)\n  }\n  getDaysCount(deltaTime) {\n    return this.padValue(Math.floor(deltaTime / (1000 * 60 * 60 * 24)), 2, '0');\n  }\n  getHoursCount(deltaTime) {\n    return this.padValue(\n      Math.floor((deltaTime % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)),\n      2,\n      '0',\n    );\n  }\n  padValue(value, num, symbol) {\n    return String(value).padStart(num, symbol);\n  }\n  getMinsCount(deltaTime) {\n    return this.padValue(Math.floor((deltaTime % (1000 * 60 * 60)) / (1000 * 60)), 2, '0');\n  }\n  getSecsCount(deltaTime) {\n    return this.padValue(Math.floor((deltaTime % (1000 * 60)) / 1000), 2, '0');\n  }\n\n  insertData(place, value) {\n    return (place.textContent = value);\n  }\n}","import CountdownTimer from './timerClass.js'\n\nconst timer = new CountdownTimer(new Date('Dec 31 2021'));\ntimer.start();\n\n\n\n//ОБРАТНЫЙ ОТЧЕТ БЕЗ ИСПОЛЬЗОАНИЯ КЛАССА//\n\n/* const { daysRest, hoursRest, minsRest, secsRest } = refs;\n\nconst targetDate = new Date('Dec 31, 2021').getTime();\n\nfunction start() {\n  setInterval(() => {\n    let currentDate = Date.now();\n    let time = targetDate - currentDate;\n\n    let days = getDaysCount(time);\n    let hours = getHoursCount(time);\n    let mins = getMinsCount(time);\n    let secs = getSecsCount(time);\n\n    days = padValue(days, 3, '-');\n    hours = padValue(hours, 2, '0');\n    mins = padValue(mins, 2, '0');\n    secs = padValue(secs, 2, '0');\n\n    insertData(daysRest, days);\n    insertData(hoursRest, hours);\n    insertData(minsRest, mins);\n    insertData(secsRest, secs);\n  }, 1000);\n}\n\nstart();\n\nfunction insertData(place, value) {\n  return (place.textContent = value);\n}\n\nfunction getDaysCount(deltaTime) {\n  return Math.floor(deltaTime / (1000 * 60 * 60 * 24));\n}\n\nfunction getHoursCount(deltaTime) {\n  return Math.floor((deltaTime % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n}\n\nfunction getMinsCount(deltaTime) {\n  return Math.floor((deltaTime % (1000 * 60 * 60)) / (1000 * 60));\n}\n\nfunction getSecsCount(deltaTime) {\n  return Math.floor((deltaTime % (1000 * 60)) / 1000);\n}\n\nfunction padValue(value, num, symbol) {\n  return String(value).padStart(num, symbol);\n}\n */"]}